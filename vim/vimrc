" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Plugins
Plug 'tpope/vim-commentary'
Plug 'pangloss/vim-javascript'
Plug 'altercation/vim-colors-solarized'
Plug 'terryma/vim-multiple-cursors'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf'
Plug 'prettier/vim-prettier'
Plug 'vim-syntastic/syntastic'
Plug 'reasonml-editor/vim-reason-plus'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'scrooloose/nerdtree'

" Initialize plugin system
call plug#end()

" Show line numbers
set number

" Color scheme
" set background=light
set background=dark
colorscheme solarized

" Enable syntax highlighting
syntax on
filetype plugin on
filetype indent on

" Line length limiter
set colorcolumn=80

" Highlight all search results
set hlsearch
" Highlight as you type
set incsearch

set ignorecase
set smartcase

" Highlight TODO, FIXME, etc.. and trailing white space characters
match Todo /\s\+$/
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/

" Indent settings
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set autoindent

" File Explorer - tree view
let g:netrw_liststyle = 3

" Underline current line
set cursorline

" Enable the markdown syntax highlight for .md files
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" Prettier
map <leader>p :Prettier<cr>
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#parser = 'babylon'
let g:prettier#exec_cmd_path = "prettier"

" LanguageClient
set hidden
set completefunc=LanguageClient#complete
let g:LanguageClient_autoStart = 1
" Need to install the following language servers:
" - https://github.com/freebroccolo/ocaml-language-server
let g:LanguageClient_serverCommands = {
  \ 'javascript': ['flow-language-server', '--stdio', '--try-flow-bin'],
  \ 'reason': ['ocaml-language-server', '--stdio']
  \ }
let g:LanguageClient_rootMarkers = {
  \ 'javascript': ['.flowconfig']
  \ }
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> gf :call LanguageClient_textDocument_formatting()<cr>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
nnoremap <silent> <C-f> :call LanguageClient#textDocument_references()<CR>

" FZF
map <c-p> :FZF<cr>

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" This requires eslint to be installed on the system
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'npx eslint'
